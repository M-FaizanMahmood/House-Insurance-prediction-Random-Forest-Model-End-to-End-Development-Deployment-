# -*- coding: utf-8 -*-
"""Insurance Data Cleaning .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xgpfbtH9x72LTLn80bqD8TbOF-WMhKIJ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import MinMaxScaler


sns.set_theme()
sns.set_style('whitegrid')
sns.set_palette(['#3F7C85', '#FF5F5D', '#00CCBF', '#72F2EB', '#747E7E'])

"""1. loading data"""

df = pd.read_csv('/content/drive/MyDrive/DS7 DATSET/insurance.csv')
df.head()

df.describe()

df.isnull().sum()

df.shape

df.info()

df.duplicated()

df[df.duplicated()]

df.drop_duplicates(inplace=True)

df.shape

df['age'].value_counts().plot(kind='bar',figsize=(20, 6))

plt.figure(figsize=(20, 6))
plt.bar(df['children'].value_counts().index, df['children'].value_counts().values)
plt.xlabel('children')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(20, 6))
plt.bar(df['smoker'].value_counts().index, df['smoker'].value_counts().values)
plt.xlabel('smoker')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(20, 6))
plt.bar(df['region'].value_counts().index, df['region'].value_counts().values)
plt.xlabel('region')
plt.ylabel('Count')
plt.show()

# pairwise relationships
sns.pairplot(df, diag_kind='auto')
plt.show()

df.columns

plt.boxplot(df['age'])
plt.show()

plt.boxplot(df['bmi'])
plt.show()

Q1 = df['bmi'].quantile(0.25)
Q3 = df['bmi'].quantile(0.75)
IQR = Q3 - Q1

# Define lower and upper bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Cap outliers
df['bmi'] = df['bmi'].apply(lambda x: lower_bound if x < lower_bound else upper_bound if x > upper_bound else x)

plt.boxplot(df['bmi'])
plt.show()

plt.boxplot(df['children'])
plt.show()

plt.boxplot(df['charges'])
plt.show()

Q1 = df['charges'].quantile(0.25)
Q3 = df['charges'].quantile(0.75)
IQR = Q3 - Q1

# Define lower and upper bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Cap outliers
df['charges'] = df['charges'].apply(lambda x: lower_bound if x < lower_bound else upper_bound if x > upper_bound else x)

plt.boxplot(df['charges'])
plt.show()

# pairwise relationships
sns.pairplot(df, diag_kind='auto')
plt.show()

# Checking for correlation
categorical_cols = df.select_dtypes(include=['object']).columns
df_encoded = pd.get_dummies(df, columns=categorical_cols)
plt.figure(figsize=(10, 6))
sns.heatmap(df_encoded.corr(), annot=True, cmap='plasma')
plt.show()

"""positive realtionship with : smoker , age , bmi , children, male, regon south east"""

df_encoded

df["sex"]

df.columns

dfDummies = pd.get_dummies(df, columns=["sex", "smoker","region","children"], prefix=["sex", "smoker","region","children"], dtype=int)

dfDummies

for col in ['age', 'bmi', 'charges', 'sex_female', 'sex_male', 'smoker_no', 'smoker_yes', 'region_northeast', 'region_northwest', 'region_southeast', 'region_southwest', 'children_0', 'children_1', 'children_2', 'children_3', 'children_4', 'children_5']:
  plt.figure()
  sns.boxplot(data=dfDummies, x=col, y="charges")
  plt.show()

scaler = StandardScaler()

dfDummies[['age', 'bmi']] = scaler.fit_transform(dfDummies[['age', 'bmi']])

dfDummies

joblib.dump(scaler, '/content/drive/MyDrive/insurance model/insurance_scaler2.pkl')

dfDummies.to_csv('/content/drive/MyDrive/DS7 DATSET/insurance_processed.csv', index=False)